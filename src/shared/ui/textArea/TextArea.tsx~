import { ChangeEvent, ComponentPropsWithoutRef, forwardRef, useEffect, useId, useState } from 'react';

import clsx from 'clsx';

import s from './TextArea.module.scss';

export type TextAreaProps = {
  /**
   * Optional callback function to handle text input changes.
   * Receives the current text value as an argument.
   */
  callback?: (text: string) => void;

  /**
   * Optional additional class name for customizing the textarea size.
   */
  classNameTextAreaSize?: string;

  /**
   * Optional string value for displaying a character counter or other indicator.
   */
  counterValue?: string;

  /**
   * The current value of the textarea. Can be controlled externally.
   */
  currentValue?: string;

  /**
   * Error message to display under the textarea, or undefined if no error exists.
   */
  error?: string | undefined;

  /**
   * Label text to display above the textarea.
   */
  label?: string;

  /**
   * Boolean flag to indicate whether the textarea should be resizable.
   */
  resize?: boolean;
} & ComponentPropsWithoutRef<'textarea'>;

/**
 * A customizable textarea component with support for labels, error messages,
 * resizing, and an optional character counter.
 *
 * @param props The component props, including optional callback, currentValue, and error state.
 * @param ref A forwarded ref to the textarea element.
 */
export const TextArea = forwardRef<HTMLInputElement, TextAreaProps>((props: TextAreaProps, ref) => {
  const {
    callback,
    className,
    classNameTextAreaSize,
    counterValue,
    currentValue,
    error,
    id,
    label,
    placeholder,
    resize,
    ...restProps
  } = props;
  const [inputValue, setInputValue] = useState(currentValue || '');

  function handleChange(e: ChangeEvent<HTMLTextAreaElement>) {
    props.onChange?.(e);
    setInputValue(e.target.value);
  }
  const clearInput = () => {
    setInputValue('');
    if (callback) {
      callback('');
    }
  };
  const focusOnInput = () => {
    const inputElement = document.getElementById(id ?? generatedId);

    inputElement?.focus();
  };

  useEffect(() => {
    props.currentValue === '' && setInputValue('');
  }, [props.currentValue]);

  const generatedId = useId();
  let classNameForTextArea = '';

  if (error) {
    classNameForTextArea = clsx(s.boxTextArea, s.error, classNameTextAreaSize);
  } else {
    classNameForTextArea = clsx(s.boxTextArea, classNameTextAreaSize);
  }

  return (
    <div className={clsx(s.box, className)}>
      {label && <div className={error ? s.error : s.label}>{label}</div>}
      <div>
        {/* ! ДОБАВИЛ КЛАСС */}
        <textarea
          {...restProps}
          className={resize ? clsx(classNameForTextArea, s.resize) : classNameForTextArea}
          id={id ?? generatedId}
          onChange={handleChange}
          placeholder={placeholder}
          value={inputValue}
        />
        {/* ! ДОБАВИЛ counter */}
        {counterValue && <div className={s.counterValue}>{counterValue}</div>}
      </div>
      {error && <div className={s.error}>{error}</div>}
    </div>
  );
});
